# standard_code_list_web <- "http://ec.europa.eu/eurostat/ramon/nomenclatures/"
first_page_url <- "http://ec.europa.eu/eurostat/ramon/nomenclatures/index.cfm?TargetUrl=LST_NOM&StrGroupCode=SCL&StrLanguageCode=EN"
html_p1 <- read_html(first_page_url)
closeAllConnections()
# get total number of pages ('n_pages') as indicated on first page
page_numbers <- html_nodes(html_p1, ".text")
page_numbers <- page_numbers[grepl("Page 1/.", page_numbers)] %>% html_text()
page_numbers <- gsub("[^[:digit:]]","",page_numbers)
page_numbers <- substring(page_numbers,c(1,2),c(1,nchar(page_numbers))) %>% as.integer()
n_pages <- tail(page_numbers,1)  # last element is last page
# generate links to all pages p in Pages
page_links <- c(first_page_url, paste0(first_page_url,rep("&IntCurrentPage=",n_pages-1),as.character(2:n_pages)) )
# On which page is indicator abbrevation listed, if any?
# for all webpages ...
for (p in seq_along(page_links) ) {
address <- read_html(page_links[p])
closeAllConnections()
# get content of main table on page
Page.Table <- html_nodes(address, xpath='//*[@id="wrapper"]/form[2]/table[2]/td/table') %>% html_table( ,header=T,)
# get all links in table of current page
Link_to <- html_nodes(address, xpath='//*[@id="wrapper"]/form[2]/table[2]/td/table/tr') %>% html_nodes("a") %>% html_attr("href")
# combine indicator information with links
Page.Table[[1]]$link_to <- Link_to[!grepl("javascript:", Link_to) ]
Page.Table <- Page.Table[[1]]
# get column with codes
codes <- Page.Table[,"English abbreviation"]
class(Page.Table$link_to)
#
if (  # check if indicator (substrings) are in list of abbreviated codes on current page
ifelse(n_sub_indicators>1,  # if indicator has substring elements
n_sub_indicators %in% colSums( t( sapply(indicator_substring,FUN = function(x) grepl(x,codes,ignore.case=T) ) ) ),
TRUE %in% sapply(codes, function(x) toupper(indicator) == x ) ) # end ifelse
) {
# get row of table in which indicator information is
in_row <- ifelse(n_sub_indicators>1,  # if indicator has substring elements
which(n_sub_indicators = colSums( t( sapply(indicator_substring,FUN = function(x) grepl(x,codes,ignore.case=T) ) ) ) ),
which(TRUE == sapply(codes, function(x) toupper(indicator) == x ) ) )
# get link in this row
link_to <- Page.Table[in_row, "link_to"]
# if no link exists despite indicator code abbreviation is listed on current page
if ( !grepl("[http://ec.europa.eu/eurostat/ramon/nomenclatures/index.cfm?TargetUrl=ACT_OTH_DFLT_LAYOUT&StrNom=+&StrLanguageCode=EN]",link_to) ) {  # quit and raise error
stop(paste0("Code abbrevation like '",indicator,"' (or substring) was found on page ",as.character(p),
" but no link to standard code table could be obtained. ",
"See ",paste0(standard_code_list_web,page_links[p])," in order to browse webpage manually."))
} else {
# follow link address
labels_html <- read_html(link_to)
closeAllConnections()
# and obtain standard code list
LABS <- html_nodes(labels_html, xpath='//*[@id="wrapper"]/form[2]/table[2]') %>% html_nodes("table") %>% html_table( , fill=TRUE)
standard_code_table <- LABS[[1]][ grepl("^[[:alpha:]]+",LABS[[1]]$X6), c(4,6)]
rownames(standard_code_table) <- NULL
colnames(standard_code_table) <- c("Code","Label")
print(standard_code_table)
break
}  # END if
} # else proceed to next page ...
}  # for all pages loop
}
get.Eurostat.codelabels <- function (indicator) {
n_sub_indicators <- 1
if ( TRUE %in% grepl("_", indicator) ) {  # if indcator has multiple substrings separated by an underscore (standard in Eurostat variable names)
indicator_substring <- strsplit(indicator, "_")[[1]]  # get individual substrings separated by an underscore
n_sub_indicators <- length(indicator_substring)  # determine total number of substring indicator elements
}
#
# standard_code_list_web <- "http://ec.europa.eu/eurostat/ramon/nomenclatures/"
first_page_url <- "http://ec.europa.eu/eurostat/ramon/nomenclatures/index.cfm?TargetUrl=LST_NOM&StrGroupCode=SCL&StrLanguageCode=EN"
html_p1 <- read_html(first_page_url)
closeAllConnections()
# get total number of pages ('n_pages') as indicated on first page
page_numbers <- html_nodes(html_p1, ".text")
page_numbers <- page_numbers[grepl("Page 1/.", page_numbers)] %>% html_text()
page_numbers <- gsub("[^[:digit:]]","",page_numbers)
page_numbers <- substring(page_numbers,c(1,2),c(1,nchar(page_numbers))) %>% as.integer()
n_pages <- tail(page_numbers,1)  # last element is last page
# generate links to all pages p in Pages
page_links <- c(first_page_url, paste0(first_page_url,rep("&IntCurrentPage=",n_pages-1),as.character(2:n_pages)) )
# On which page is indicator abbrevation listed, if any?
# for all webpages ...
for (p in seq_along(page_links) ) {
address <- read_html(page_links[p])
closeAllConnections()
# get content of main table on page
Page.Table <- html_nodes(address, xpath='//*[@id="wrapper"]/form[2]/table[2]/td/table') %>% html_table( ,header=T,)
# get all links in table of current page
Link_to <- html_nodes(address, xpath='//*[@id="wrapper"]/form[2]/table[2]/td/table/tr') %>% html_nodes("a") %>% html_attr("href")
# combine indicator information with links
Page.Table[[1]]$link_to <- Link_to[!grepl("javascript:", Link_to) ]
Page.Table <- Page.Table[[1]]
# get column with codes
codes <- Page.Table[,"English abbreviation"]
class(Page.Table$link_to)
#
if (  # check if indicator (substrings) are in list of abbreviated codes on current page
ifelse(n_sub_indicators>1,  # if indicator has substring elements
n_sub_indicators %in% colSums( t( sapply(indicator_substring,FUN = function(x) grepl(x,codes,ignore.case=T) ) ) ),
TRUE %in% sapply(codes, function(x) toupper(indicator) == x ) ) # end ifelse
) {
# get row of table in which indicator information is
in_row <- ifelse(n_sub_indicators>1,  # if indicator has substring elements
which(n_sub_indicators = colSums( t( sapply(indicator_substring,FUN = function(x) grepl(x,codes,ignore.case=T) ) ) ) ),
which(TRUE == sapply(codes, function(x) toupper(indicator) == x ) ) )
# get link in this row
link_to <- Page.Table[in_row, "link_to"]
# if no link exists despite indicator code abbreviation is listed on current page
if ( !grepl("[http://ec.europa.eu/eurostat/ramon/nomenclatures/index.cfm?TargetUrl=ACT_OTH_DFLT_LAYOUT&StrNom=+&StrLanguageCode=EN]",link_to) ) {  # quit and raise error
stop(paste0("Code abbrevation like '",indicator,"' (or substring) was found on page ",as.character(p),
" but no link to standard code table could be obtained. ",
"See ",paste0(standard_code_list_web,page_links[p])," in order to browse webpage manually."))
} else {
# follow link address
labels_html <- read_html(link_to)
closeAllConnections()
# and obtain standard code list
LABS <- html_nodes(labels_html, xpath='//*[@id="wrapper"]/form[2]/table[2]') %>% html_nodes("table") %>% html_table( , fill=TRUE)
standard_code_table <- LABS[[1]][ grepl("^[[:alpha:]]+",LABS[[1]]$X6), c(4,6)]
rownames(standard_code_table) <- NULL
colnames(standard_code_table) <- c("Code","Label")
print(standard_code_table)
break
}  # END if
} # else proceed to next page ...
}  # for all pages loop
}
get.Eurostat.codelabels("icha_hf")
get.Eurostat.codelabels <- function (indicator) {
n_sub_indicators <- 1
if ( TRUE %in% grepl("_", indicator) ) {  # if indcator has multiple substrings separated by an underscore (standard in Eurostat variable names)
indicator_substring <- strsplit(indicator, "_")[[1]]  # get individual substrings separated by an underscore
n_sub_indicators <- length(indicator_substring)  # determine total number of substring indicator elements
}
#
# standard_code_list_web <- "http://ec.europa.eu/eurostat/ramon/nomenclatures/"
first_page_url <- "http://ec.europa.eu/eurostat/ramon/nomenclatures/index.cfm?TargetUrl=LST_NOM&StrGroupCode=SCL&StrLanguageCode=EN"
html_p1 <- read_html(first_page_url)
closeAllConnections()
# get total number of pages ('n_pages') as indicated on first page
page_numbers <- html_nodes(html_p1, ".text")
page_numbers <- page_numbers[grepl("Page 1/.", page_numbers)] %>% html_text()
page_numbers <- gsub("[^[:digit:]]","",page_numbers)
page_numbers <- substring(page_numbers,c(1,2),c(1,nchar(page_numbers))) %>% as.integer()
n_pages <- tail(page_numbers,1)  # last element is last page
# generate links to all pages p in Pages
page_links <- c(first_page_url, paste0(first_page_url,rep("&IntCurrentPage=",n_pages-1),as.character(2:n_pages)) )
# On which page is indicator abbrevation listed, if any?
# for all webpages ...
for (p in seq_along(page_links) ) {
address <- read_html(page_links[p])
closeAllConnections()
# get content of main table on page
Page.Table <- html_nodes(address, xpath='//*[@id="wrapper"]/form[2]/table[2]/td/table') %>% html_table( ,header=T,)
# get all links in table of current page
Link_to <- html_nodes(address, xpath='//*[@id="wrapper"]/form[2]/table[2]/td/table/tr') %>% html_nodes("a") %>% html_attr("href")
# combine indicator information with links
Page.Table[[1]]$link_to <- Link_to[!grepl("javascript:", Link_to) ]
Page.Table <- Page.Table[[1]]
# get column with codes
codes <- Page.Table[,"English abbreviation"]
class(Page.Table$link_to)
#
if (  # check if indicator (substrings) are in list of abbreviated codes on current page
ifelse(n_sub_indicators>1,  # if indicator has substring elements
n_sub_indicators %in% colSums( t( sapply(indicator_substring,FUN = function(x) grepl(x,codes,ignore.case=T) ) ) ),
TRUE %in% sapply(codes, function(x) toupper(indicator) == x ) ) # end ifelse
) {
# get row of table in which indicator information is
in_row <- ifelse(n_sub_indicators>1,  # if indicator has substring elements
which(n_sub_indicators == colSums( t( sapply(indicator_substring,FUN = function(x) grepl(x,codes,ignore.case=T) ) ) ) ),
which(TRUE == sapply(codes, function(x) toupper(indicator) == x ) ) )
# get link in this row
link_to <- Page.Table[in_row, "link_to"]
# if no link exists despite indicator code abbreviation is listed on current page
if ( !grepl("[http://ec.europa.eu/eurostat/ramon/nomenclatures/index.cfm?TargetUrl=ACT_OTH_DFLT_LAYOUT&StrNom=+&StrLanguageCode=EN]",link_to) ) {  # quit and raise error
stop(paste0("Code abbrevation like '",indicator,"' (or substring) was found on page ",as.character(p),
" but no link to standard code table could be obtained. ",
"See ",paste0(standard_code_list_web,page_links[p])," in order to browse webpage manually."))
} else {
# follow link address
labels_html <- read_html(link_to)
closeAllConnections()
# and obtain standard code list
LABS <- html_nodes(labels_html, xpath='//*[@id="wrapper"]/form[2]/table[2]') %>% html_nodes("table") %>% html_table( , fill=TRUE)
standard_code_table <- LABS[[1]][ grepl("^[[:alpha:]]+",LABS[[1]]$X6), c(4,6)]
rownames(standard_code_table) <- NULL
colnames(standard_code_table) <- c("Code","Label")
print(standard_code_table)
break
}  # END if
} # else proceed to next page ...
}  # for all pages loop
}
get.Eurostat.codelabels("icha_hf")
get.Eurostat.codelabels("icha")
indicator <- "icha"  # is on second page
n_sub_indicators <- 1
if ( TRUE %in% grepl("_", indicator) ) {  # if indcator has multiple substrings separated by an underscore (standard in Eurostat variable names)
indicator_substring <- strsplit(indicator, "_")[[1]]  # get individual substrings separated by an underscore
n_sub_indicators <- length(indicator_substring)  # determine total number of substring indicator elements
}
first_page_url <- "http://ec.europa.eu/eurostat/ramon/nomenclatures/index.cfm?TargetUrl=LST_NOM&StrGroupCode=SCL&StrLanguageCode=EN"
html_p1 <- read_html(first_page_url)
closeAllConnections()
# get total number of pages ('n_pages') as indicated on first page
page_numbers <- html_nodes(html_p1, ".text")
page_numbers <- page_numbers[grepl("Page 1/.", page_numbers)] %>% html_text()
page_numbers <- gsub("[^[:digit:]]","",page_numbers)
page_numbers <- substring(page_numbers,c(1,2),c(1,nchar(page_numbers))) %>% as.integer()
n_pages <- tail(page_numbers,1)  # last element is last page
first_page_url <- "http://ec.europa.eu/eurostat/ramon/nomenclatures/index.cfm?TargetUrl=LST_NOM&StrGroupCode=SCL&StrLanguageCode=EN"
html_p1 <- read_html(first_page_url)
closeAllConnections()
# get total number of pages ('n_pages') as indicated on first page
page_numbers <- html_nodes(html_p1, ".text")
page_numbers <- page_numbers[grepl("Page 1/.", page_numbers)] %>% html_text()
page_numbers <- gsub("[^[:digit:]]","",page_numbers)
page_numbers <- substring(page_numbers,c(1,2),c(1,nchar(page_numbers))) %>% as.integer()
n_pages <- tail(page_numbers,1)  # last element is last page
# generate links to all pages p in Pages
page_links <- c(first_page_url, paste0(first_page_url,rep("&IntCurrentPage=",n_pages-1),as.character(2:n_pages)) )
# On which page is indicator abbrevation listed, if any?
# for all webpages ...
for (p in seq_along(page_links) ) {
address <- read_html(page_links[p])
closeAllConnections()
# get content of main table on page
Page.Table <- html_nodes(address, xpath='//*[@id="wrapper"]/form[2]/table[2]/td/table') %>% html_table( ,header=T,)
# get all links in table of current page
Link_to <- html_nodes(address, xpath='//*[@id="wrapper"]/form[2]/table[2]/td/table/tr') %>% html_nodes("a") %>% html_attr("href")
# combine indicator information with links
Page.Table[[1]]$link_to <- Link_to[!grepl("javascript:", Link_to) ]
Page.Table <- Page.Table[[1]]
# get column with codes
codes <- Page.Table[,"English abbreviation"]
class(Page.Table$link_to)
indicator <- "icha"  # is on second page
first_page_url <- "http://ec.europa.eu/eurostat/ramon/nomenclatures/index.cfm?TargetUrl=LST_NOM&StrGroupCode=SCL&StrLanguageCode=EN"
html_p1 <- read_html(first_page_url)
closeAllConnections()
# get total number of pages ('n_pages') as indicated on first page
indicator <- "icha"  # is on second page
require(rvest, warn.conflicts=FALSE)
first_page_url <- "http://ec.europa.eu/eurostat/ramon/nomenclatures/index.cfm?TargetUrl=LST_NOM&StrGroupCode=SCL&StrLanguageCode=EN"
html_p1 <- read_html(first_page_url)
closeAllConnections()
option(warn=-1)
options(warn=-1)
require(rvest, warn.conflicts=FALSE)
options(warn=-1)
require(rvest, warn.conflicts=FALSE)
first_page_url <- "http://ec.europa.eu/eurostat/ramon/nomenclatures/index.cfm?TargetUrl=LST_NOM&StrGroupCode=SCL&StrLanguageCode=EN"
html_p1 <- read_html(first_page_url)
closeAllConnections()
# get total number of pages ('n_pages') as indicated on first page
page_numbers <- html_nodes(html_p1, ".text")
page_numbers <- page_numbers[grepl("Page 1/.", page_numbers)] %>% html_text()
page_numbers <- gsub("[^[:digit:]]","",page_numbers)
page_numbers <- substring(page_numbers,c(1,2),c(1,nchar(page_numbers))) %>% as.integer()
n_pages <- tail(page_numbers,1)  # last element is last page
# generate links to all pages p in Pages
page_links <- c(first_page_url, paste0(first_page_url,rep("&IntCurrentPage=",n_pages-1),as.character(2:n_pages)) )
# On which page is indicator abbrevation listed, if any?
# for all webpages ...
for (p in seq_along(page_links) ) {
address <- read_html(page_links[p])
closeAllConnections()
# get content of main table on page
Page.Table <- html_nodes(address, xpath='//*[@id="wrapper"]/form[2]/table[2]/td/table') %>% html_table( ,header=T,)
# get all links in table of current page
Link_to <- html_nodes(address, xpath='//*[@id="wrapper"]/form[2]/table[2]/td/table/tr') %>% html_nodes("a") %>% html_attr("href")
# combine indicator information with links
Page.Table[[1]]$link_to <- Link_to[!grepl("javascript:", Link_to) ]
Page.Table <- Page.Table[[1]]
# get column with codes
codes <- Page.Table[,"English abbreviation"]
class(Page.Table$link_to)
require(shiny)
require(RPostgreSQL)
if (!require(DT)) install.packages("DT")
# Connect to Database
dbname <- "polconfdb"
dbuser <- "polconfdb"
dbhost <- "moodledb.cms.hu-berlin.de"
dbport <- "5432"
dbpass <- "S8:kFG%6+u_Zrw"
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, host=dbhost, port=dbport, dbname=dbname, user=dbuser, password=dbpass)
configuration_events <- dbGetQuery(con,"SELECT * FROM beta_version.mv_configuration_events ORDER BY ctr_id, sdate")
countries <-  dbGetQuery(con,"SELECT * FROM config_data.country")
configuration_events <- merge(countries[,1:4], configuration_events,by="ctr_id", all.y=T)
require(countrycode)
configuration_events$country_name <- countrycode(configuration_events$ctr_ccode2 , "iso2c", "country.name")
# Variables in data, optional choices
var_choices <- as.matrix(names(configuration_events))
rownames(var_choices) <- c("country ID", "country name (upper case)", "country ISO-3-character code",  "country ISO-2-character code",
"start date", "cabinet ID", "lower house ID", "lower house election ID", "upper house ID", "presidential election ID",
"year", "end date", "Type of configuration change", "country name")
var_choices <- apply(var_choices, 1,  function( c ) c[1] = c[1])
var_choices <- as.list(var_choices)
# Countries in data, optional choices
countries_in_data <- as.matrix(c("All", unique(configuration_events[,"ctr_ccode"])))
rownames(countries_in_data) <- countrycode(countries_in_data[,1],"iso3c","country.name")
rownames(countries_in_data)[is.na(rownames(countries_in_data))][1] <- "All countries"
rownames(countries_in_data)[is.na(rownames(countries_in_data))] <- "Korea, Republic of"
countries_in_data <- apply(countries_in_data, 1,  function( c ) c[1] = c[1])
countries_in_data <- as.list(countries_in_data)
# date range
min_sdate <- min(configuration_events$sdate)
max_sdate <- max(configuration_events$sdate)
dbDisconnect(con)
shiny::runApp('Documents/Humboldt/Electoral_Vulnerability/Projects/shiny-experiments')
shiny::runApp('Documents/Humboldt/Electoral_Vulnerability/Projects/shiny-experiments')
shiny::runApp('Documents/Humboldt/Electoral_Vulnerability/Projects/shiny-experiments')
shiny::runApp('Documents/Humboldt/Electoral_Vulnerability/Projects/shiny-experiments')
require(shiny)
require(RPostgreSQL)
if (!require(DT)) install.packages("DT")
# Connect to Database
dbname <- "polconfdb"
dbuser <- "polconfdb"
dbhost <- "moodledb.cms.hu-berlin.de"
dbport <- "5432"
dbpass <- "S8:kFG%6+u_Zrw"
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, host=dbhost, port=dbport, dbname=dbname, user=dbuser, password=dbpass)
shiny::runApp('Documents/Humboldt/Electoral_Vulnerability/Projects/shiny-experiments')
shiny::runApp('Documents/Humboldt/Electoral_Vulnerability/Projects/shiny-experiments')
shiny::runApp('Documents/Humboldt/Electoral_Vulnerability/Projects/shiny-experiments')
shiny::runApp('Documents/Humboldt/Electoral_Vulnerability/Projects/shiny-experiments')
var_choices
length(var_choices)
var_choices[[c(1,3,5:12)]]
var_choices[c(1,3,5:12)]
shiny::runApp('Documents/Humboldt/Electoral_Vulnerability/Projects/shiny-experiments')
rm(list = ls())
if (!require(RPostgreSQL)) install.packages("RPostgreSQL")
if (!require(dplyr)) install.packages("dplyr")
path <- "/Users/lichthau/Documents/Humboldt/Electoral_Vulnerability/Projects/vaps-dashboard_public"
if ( !grepl(".*/vaps-dashboard_public",getwd()) ) setwd(path) ## set path to vaps-dashboard_public here ##
rm(path)
# (1) Connect to Database
# define parameters as object
dbname <- "polconfdb"
dbuser <- "polconfdb_4"
dbhost <- "moodledb.cms.hu-berlin.de"
dbport <- "5432"
dbpass <- "Zs%7f_+9;hcRRw"
# connect to PostgreSQL Server
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, host=dbhost, port=dbport, dbname=dbname, user=dbuser, password=dbpass)
# remove parameter objects
rm(list=(ls()[grepl("[db.{4}]",ls())]))
# (2) Read data tables
# get dataframe with columns in TABLES in beta_version schema
ColumnsInTables <- dbGetQuery(con,"SELECT table_catalog, table_schema, table_name, column_name, ordinal_position, data_type
FROM information_schema.columns
WHERE table_schema = 'beta_version'
AND table_name NOT LIKE 'view_%';")
head(ColumnsInTables)
# list tables ...
TABLES <- sort(unique(ColumnsInTables$table_name))
TABLES <- TABLES[!grepl("update_|matview|pview",TABLES)]
# ... and read Tables in beta_version schema into dataframes
for (i in 1:length(TABLES)) {
assign(TABLES[i], dbReadTable(con, c("beta_version",TABLES[i])))
}
# get dataframe with columns in VIEWS in beta_version schema
ColumnsInViews <- dbGetQuery(con,"SELECT table_catalog, table_schema, table_name, column_name, ordinal_position, data_type
FROM information_schema.columns
WHERE table_schema = 'beta_version'
AND table_name LIKE '%view_%';")
head(ColumnsInViews)
# list views ...
VIEWS <-  sort(unique(ColumnsInViews$table_name))
VIEWS
VIEWS <-  VIEWS[!grepl("matview",VIEWS)]
VIEWS
for (i in 1:length(VIEWS)) {
assign(gsub("../shiny-experiments/view_configuration_vto","vto",VIEWS)[i], dbReadTable(con, c("beta_version",VIEWS[i])))
}
dbDisconnect(con)
rm(con)
require(countrycode)
# get country ISO-character codes
country_selector_list <- rbind( "All" , country[,c("ctr_ccode2","ctr_ccode")] )
# use countrycode package to asign country names to all but first row names
rownames(country_selector_list)[-1] <- countrycode(country_selector_list[-1,1],"iso2c","country.name")
# name first row manually
rownames(country_selector_list)[1] <- "All countries"
# define as list with country names as first-dimension names, and ISO-3-character codes as elements
country_selector_list <- as.list( apply(country_selector_list[], 1,  function( e ) e = e[2]) )
AbbrLabs <- read.csv("../shiny-experiments/AbbrLabs.csv",sep=",")[,c("abbr","label")]
AbbrLabs <- read.csv("AbbrLabs.csv",sep=",")[,c("abbr","label")]
colLabsList <- list()
# and fill with lists that have code as character string as elements, and 'descriptive label (code)' as first-dimension names
for (i in seq_along(TABLES)) {
A <- unique( AbbrLabs[  AbbrLabs$abbr %in% names(get(TABLES[i])), ] )
B <- apply(A, 1,  function( c )  c[2]= c[1])
names(B) <- paste0(A[,2]," (",A[,1],")")
B <- as.list(B)
colLabsList[[i]] <-  B
rm(A,B)
}; rm(i)
# name first dimension of column-labels list
names(colLabsList) <- paste0(tolower(TABLES))
colLabsList$country[colLabsList$country %in% colnames(country)[1:4] ]
ccv <- merge(country[,1:4],cabinet,by="ctr_id",type="right")
ccv_labs <- append(colLabsList$country [colLabsList$country %in% colnames(country)[1:4] ],
colLabsList$cabinet[ -grep("ctr_id",colLabsList$cabinet) ] )
colLabsList$country[colLabsList$country %in% colnames(country)[1:4] ]
ccv_labs
all(TRUE== ( colnames(ccv) %in% ccv_labs ) )  # check: works
rm(list=(ls()[grepl("ccv.*",ls())]))
source("../databaseAccessHauke.R")
source("../databaseAccessHauke.R")
?source
getwd()
path <- setwd("/Users/lichthau/Documents/Humboldt/Electoral_Vulnerability/Projects/vaps-dashboard_public/datatable_tabs")
if ( !grepl(".*/vaps-dashboard_public/datatable_tabs",getwd()) ) setwd(path) ## set path to vaps-dashboard_public here ##
rm(path)
source("../databaseAccessHauke.R")
getwd()
substr("abcd",2,4)
path <- "/Users/lichthau/Documents/Humboldt/Electoral_Vulnerability/Projects/vaps-dashboard_public"
sub(".*/",getwd())
sub(".*/","",getwd())
sub(".*/","",getwd()) != "vaps-dashboard_public"
path <- setwd("/Users/lichthau/Documents/Humboldt/Electoral_Vulnerability/Projects/vaps-dashboard_public/datatable_tabs")
if ( sub(".*/","",getwd()) != "datatable_tabs" ) setwd(path) ## set path to vaps-dashboard_public here ##
source("../databaseAccessHauke.R")
path <- setwd("~/Documents/Humboldt/Electoral_Vulnerability/Projects/vaps-dashboard_public/datatable_tabs")
if ( sub(".*/","",getwd()) != "datatable_tabs" ) setwd(path) ## set path to vaps-dashboard_public here ##
rm(path)
path <- "~/Documents/Humboldt/Electoral_Vulnerability/Projects/vaps-dashboard_public"
if ( sub(".*/","",getwd()) != "vaps-dashboard_public" ) setwd(path) ## set path to vaps-dashboard_public here ##
rm(path)
path <- setwd("~/Documents/Humboldt/Electoral_Vulnerability/Projects/vaps-dashboard_public/datatable_tabs")
if ( sub(".*/","",getwd()) != "datatable_tabs" ) setwd(path) ## set path to vaps-dashboard_public here ##
rm(path)
if (!require(shiny)) install.packages("shiny")
if (!require(DT)) install.packages("DT")
configuration_events <- merge(country[,1:3],mv_configuration_events,by="ctr_id",all.y=T)
source("../databaseAccessHauke.R")
shiny::runApp('datatable_tabs')
ColumnsInTables
setwd("/Users/lichthau/Documents/Humboldt/Electoral_Vulnerability/Projects/PCDB/Codebook/")
tabs.tex <- read.delim("content.txt",header=F,sep="\n")
tabs.tex <- as.character(tabs.tex[grepl("tab_",tabs.tex[,1]),1])
B <- data.frame(abbr="1",label="1")
for (a in seq_along(tabs.tex)) {
A <- read.csv(tabs.tex[a], header = F, sep="&")
A$abbr <- gsub("[\\]","",A$V1)
A$abbr <- gsub("[[:blank:]]","",A$abbr)
A <- A[!grepl("tabularnewline",A$abbr),]
A$label <- gsub("[\\]footnote.*|[\\]footref.*|[\\]tabularnewline.*","",A$V2)
A$label <- gsub("[\t]","",A$label)
A$label <- trimws(A$label)
A <- A[,c("abbr", "label")]
B <- rbind(B,A)
}
AbbrLabs <- as.data.frame( apply(B,2,function(x) as.character(x)), stringsAsFactors = F)
AbbrLabs <- AbbrLabs[grepl("[[:alpha:]|.*[:digit:].$]", AbbrLabs$abbr),]
AbbrLabs
AbbrLabs
TABLES
names(ColumnsInTables)
names(ColumnsInTables)
head(ColumnsInTables)
names(AbbrLabs)
head(AbbrLabs)
merge(ColumnsInTables[,c("table_name", "column_name", "data_type")],AbbrLabs,by.x="column_name",by.y="abbr",all.x=T)
Codebook <- merge(ColumnsInTables[,c("table_name", "column_name", "data_type")],AbbrLabs,by.x="column_name",by.y="abbr",all.x=T)
head(Codebook)
names(ColumnsInTables)
Codebook <- merge(ColumnsInTables[,c("table_name", "column_name", "ordinal_position", "data_type")],AbbrLabs,by.x="column_name",by.y="abbr",all.x=T)
head(Codebook)
order(c(Codebook$table_name, Codebook$ordinal_position))
Codebook[order(c(Codebook$table_name, Codebook$ordinal_position)), ]
Codebook <- Codebook[order(c(Codebook$table_name, Codebook$ordinal_position)), ]
head(Codebook)
Codebook <- merge(ColumnsInTables[,c("table_name", "column_name", "ordinal_position", "data_type")],AbbrLabs,by.x="column_name",by.y="abbr",all.x=T)
head(Codebook)
Codebook <- Codebook[order(Codebook$table_name, Codebook$ordinal_position), ]
head(Codebook)
Codebook[1:50, ]
unique(Codebook[1:50, ])
Codebook <- unique(Codebook)
split(Codebook, Codebook$table_name)
Codebook <- split(Codebook, Codebook$table_name)
names(Codebook)
ColumnsInTables
Columns <- rbind(ColumnsInTables,ColumnsInViews)
Columns
names(Columns)
sub("table_","", names(Columns))
names(Columns) <- sub("table_","", names(Columns))
tail(Columns)
Codebook <- merge(Columns[,c("name", "column_name", "ordinal_position", "data_type")],AbbrLabs,by.x="column_name",by.y="abbr",all.x=T)
Codebook <- Codebook[order(Codebook$table_name, Codebook$ordinal_position), ]
Codebook <- Codebook[order(Codebook$name, Codebook$ordinal_position), ]
Codebook <- unique(Codebook)
Codebook <- split(Codebook, Codebook$name)
Codebook$cabinet
Codebook <- merge(Columns[,c("name", "column_name", "ordinal_position", "data_type")],AbbrLabs,by.x="column_name",by.y="abbr",all.x=T)
# oder dataframe by table and column position in table
Codebook <- Codebook[order(Codebook$name, Codebook$ordinal_position), ]
# remove duplicates from dataframe
Codebook <- unique(Codebook)
Codebook <- Codebook[, c("name", "column_name", "label", "data_type", "ordinal_position")]
Codebook <- split(Codebook, Codebook$name)
Codebook$cabinet
library(xlsx)
